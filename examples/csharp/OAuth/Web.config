<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="DfaApi" type="System.Configuration.DictionarySectionHandler"/>
  </configSections>
  <DfaApi>
    <!--
      This section contains the settings specific to the Google's DoubleClick
      for Advertisers API DotNet Client Library. You can use the App.config /
      Web.config for quickly configuring and running a simple application.
      However, it is not mandatory to provide your settings in the config file,
      you may also set or override these settings at runtime. See
      https://code.google.com/p/google-api-dfa-dotnet/wiki/HowToUseADfaUser
      for details.

      You can refer to
      https://code.google.com/p/google-api-dfa-dotnet/wiki/UnderstandingAppConfig
      for detailed explanation of each configuration key.
    -->

    <!-- Settings related to SOAP logging. -->
    <add key="LogPath" value="C:\Logs\Dfa\"/>
    <add key="LogToFile" value="false"/>
    <add key="MaskCredentials" value="true"/>
    <add key="LogErrorsOnly" value="true"/>

    <!-- Settings related to general library behaviour. -->

    <!-- Use this key to automatically retry a call that failed due to a
         recoverable error like expired credentials. -->
    <add key="RetryCount" value="1"/>

    <!-- Set the service timeout in milliseconds. -->
    <!-- <add key="Timeout" value="100000"/> -->

    <!-- Use this key to enable or disable gzip compression in SOAP requests.-->
    <add key="EnableGzipCompression" value="true"/>

    <!-- Proxy settings for library. -->
    <add key="ProxyServer" value=""/>
    <add key="ProxyUser" value=""/>
    <add key="ProxyPassword" value=""/>
    <add key="ProxyDomain" value=""/>

    <!-- Settings specific to DFA API. -->
    <!-- Set a friendly name to identify your application. -->
    <add key="ApplicationName" value="ENTER_YOUR_APPLICATION_NAME_HERE"/>

    <!-- Uncomment this key if you want to use DFA test environment. -->
    <!-- <add key="DfaApi.Server" value="https://advertisersapitest.doubleclick.net"/> -->

    <!-- Uncomment this key if you want to use DFA beta environment. -->
    <!-- <add key="DfaApi.Server" value="http://betaadvertisersapi.doubleclick.net"/> -->

    <!-- Set the Authorization method to be used with the client library. -->
    <!-- To use LoginService as authentication mechanism, uncomment the following
         section and comment the OAuth2 section below. -->

    <add key="AuthorizationMethod" value="LoginService" />
    <add key="DfaUserName" value="ENTER_YOUR_DFA_USERNAME_HERE"/>
    <add key="DfaPassword" value="ENTER_YOUR_DFA_PASSWORD_HERE"/>

    <!-- Uncomment this key if you want to reuse an authToken returned by
         LoginRemoteService multiple times. -->
    <!-- <add key="DfaAuthToken" value="ENTER_YOUR_DFA_AUTH_TOKEN_HERE"/> -->

    <!-- Settings specific to use OAuth2 as authentication mechanism. You could
         run Common\Util\OAuth2TokenGenerator.cs to generate this section of the
         config file.
    -->

    <!-- <add key="AuthorizationMethod" value="OAuth2" /> -->
    <!-- Provide the OAuth2 client ID and secret. You can create one from
         https://code.google.com/apis/console/. See
         https://code.google.com/p/google-api-dfp-dotnet/wiki/UsingOAuth
         for more details.
    -->
    <!--
    <add key="OAuth2ClientId" value="INSERT_OAUTH2_CLIENT_ID_HERE" />
    <add key="OAuth2ClientSecret" value="INSERT_OAUTH2_CLIENT_SECRET_HERE" />
    -->

    <!-- The following OAuth2 settings are optional. -->
    <!-- Provide a different OAuth2 scope if required. Multiple scopes should be
         separated by spaces. -->
    <!-- <add key="OAuth2Scope" value="INSERT_OAUTH2_SCOPE_HERE" /> -->

    <!-- Use the following keys if you want to use Web / Installed application
         OAuth flow.-->

    <!-- <add key="OAuth2Mode" value="APPLICATION" /> -->
    <!-- If you have only a single account, then you can run
         OAuth2TokenGenerator.cs to generate a RefreshToken for that account and
         set this key in your application's App.config / Web.config. If you are
         making calls to multiple accounts, then you need to implement OAuth2
         flow in your account and set this key at runtime. See OAuth folder
         under Examples folder for a web and a console application example.
    -->
    <!-- <add key="OAuth2RefreshToken" value="INSERT_OAUTH2_REFRESH_TOKEN_HERE" /> -->

    <!-- Optional: Specify an OAuth2 redirect url if you are building a
         web application and implementing OAuth2 web flow in your application.
    -->
    <!-- <add key="OAuth2RedirectUri" value="" /> -->


    <!-- Use the following keys if you want to use OAuth2 service account flow.
         You should comment out all the keys for Web / Installed application
         OAuth flow above. See
         https://developers.google.com/doubleclick-publishers/docs/service_accounts
         and https://code.google.com/p/google-api-dfp-dotnet/wiki/UsingOAuth
         for more details.
    -->
    <!--
    <add key="OAuth2Mode" value="SERVICE_ACCOUNT" />
    <add key="OAuth2ServiceAccountEmail"
        value="INSERT_OAUTH2_SERVICE_ACCOUNT_EMAIL_HERE" />
    <add key="OAuth2PrnEmail" value="INSERT_OAUTH2_USER_EMAIL_HERE" />
    <add key="OAuth2JwtCertificatePath"
        value="INSERT_OAUTH2_JWT_CERTIFICATE_PATH_HERE" />
    <add key="OAuth2JwtCertificatePassword"
        value="INSERT_OAUTH2_JWT_CERTIFICATE_PASSWORD_HERE" />
    -->
  </DfaApi>
  <system.web>
    <webServices>
      <soapExtensionTypes>
        <add type="Google.Api.Ads.Common.Lib.SoapListenerExtension, Google.Ads.Common"
             priority="1" group="0"/>
      </soapExtensionTypes>
    </webServices>
    <compilation debug="true"/>
  </system.web>
  <system.net>
    <settings>
      <httpWebRequest maximumErrorResponseLength="-1"  />
    </settings>
  </system.net>
</configuration>
