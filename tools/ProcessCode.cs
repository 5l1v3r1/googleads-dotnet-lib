// Copyright 2009, Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: api.anash@gmail.com (Anash P. Oommen)

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace com.google.api.adwords.tools {
  /// <summary>
  /// Process the code generated by wsdl.exe.
  /// </summary>
  class ProcessCode {
    /// <summary>
    /// Main entry point for this class.
    /// </summary>
    /// <param name="cmdLineParams">The command line parameters for this
    /// program.</param>
    /// <returns>True, if the command line parameters were properly
    /// given.</returns>
    public bool Run(Dictionary<string, string> cmdLineParams) {
      if (cmdLineParams.ContainsKey("file")) {
        ProcessWsdlOutput(cmdLineParams["file"]);
        return true;
      } else {
        return false;
      }
    }

    /// <summary>
    /// Process the C# wrapper file that wsdl.exe generates from AdWords API
    /// web services.
    /// </summary>
    /// <param name="outputFile">The C# file to be processed. This file will be
    /// overwritten by the application.</param>
    private void ProcessWsdlOutput(string outputFile) {
      string[] searches = {
          "public partial class RequestHeader",
          "public partial class ResponseHeader",
          "System.Web.Services.Protocols.SoapHttpClientProtocol",
          "requestHeaderTempField", "RequestHeaderTemp",
          "responseHeaderTempField", "ResponseHeaderTemp",
      };

      string[] replaces = {
          "public partial class __RequestHeader",
          "public partial class __ResponseHeader",
          "AdWordsApiService",
          "requestHeaderField", "RequestHeader",
          "responseHeaderField", "ResponseHeader",
      };

      string[] operationPatches = {
          "AdGroupAdOperation", "AdGroupCriterionOperation", "AdGroupOperation", "JobOperation",
          "CampaignOperation", "CampaignCriterionOperation", "CampaignAdExtensionOperation",
          "CampaignTargetOperation"
      };

      string[] lines = {};
      using (StreamReader reader = new StreamReader(outputFile)) {
        lines = reader.ReadToEnd().Split(new char[] {'\r', '\n'},
            StringSplitOptions.RemoveEmptyEntries);
      }
      if (lines.Length > 0) {
        using (StreamWriter writer = new StreamWriter(outputFile)) {
          for (int i = 0; i < lines.Length; i++) {
            string line = lines[i];

            // Search and replaces.
            for (int j = 0; j < searches.Length; j++) {
              line = line.Replace(searches[j], replaces[j]);
            }

            // Patch the url.
            string temp = line.Trim();
            if (temp.StartsWith("this.Url = ")) {
              line = "this.Url = \"http://localhost\";";
              if (temp.EndsWith("+")) {
                while (!lines[i].Trim().EndsWith(";")) {
                  i++;
                }
              }
            }

            // Add missing XmlIncludes.
            if (temp.StartsWith("public abstract partial class Operation")) {
              foreach(string operationClass in operationPatches) {
                writer.WriteLine(string.Format(
                    "[System.Xml.Serialization.XmlIncludeAttribute(typeof({0}))]",
                    operationClass));
              }
            }

            // Remove /// <remarks/>
            if (temp == "/// <remarks/>") {
              continue;
            }

            writer.WriteLine(line);
          }
        }
      }
    }
  }
}
