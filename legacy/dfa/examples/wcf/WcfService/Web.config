<?xml version="1.0"?>
<configuration>
  <configSections>
    <sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
      <sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
        <section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
        <sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
          <section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere"/>
          <section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
          <section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
          <section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
        </sectionGroup>
      </sectionGroup>
    </sectionGroup>
    <section name="DfaApi" type="System.Configuration.DictionarySectionHandler"/>
  </configSections>
  <appSettings/>
  <connectionStrings/>
  <DfaApi>
    <!--
      This section contains the settings specific to the Google's DoubleClick
      for Advertisers API DotNet Client Library. You can use the App.config /
      Web.config for quickly configuring and running a simple application.
      However, it is not mandatory to provide your settings in the config file,
      you may also set or override these settings at runtime. See
      https://code.google.com/p/google-api-dfa-dotnet/wiki/HowToUseADfaUser
      for details.

      You can refer to
      https://code.google.com/p/google-api-dfa-dotnet/wiki/UnderstandingAppConfig
      for detailed explanation of each configuration key.
    -->

    <!-- Settings related to SOAP logging. -->
    <add key="MaskCredentials" value="true"/>

    <!-- Settings related to general library behaviour. -->

    <!-- Set the service timeout in milliseconds. -->
    <!-- <add key="Timeout" value="100000"/> -->

    <!-- Use this key to enable or disable gzip compression in SOAP requests.-->
    <add key="EnableGzipCompression" value="true"/>

    <!-- Proxy settings for library. -->
    <add key="ProxyServer" value=""/>
    <add key="ProxyUser" value=""/>
    <add key="ProxyPassword" value=""/>
    <add key="ProxyDomain" value=""/>

    <!-- Settings specific to DFA API. -->
    <!-- Set a friendly name to identify your application. -->
    <add key="ApplicationName" value="ENTER_YOUR_APPLICATION_NAME_HERE"/>

    <!-- Uncomment this key if you want to use DFA test environment. -->
    <!-- <add key="DfaApi.Server" value="https://advertisersapitest.doubleclick.net"/> -->

    <!-- Uncomment this key if you want to use DFA beta environment. -->
    <!-- <add key="DfaApi.Server" value="http://betaadvertisersapi.doubleclick.net"/> -->

    <!-- Set the Authorization method to be used with the client library. -->
    <!-- To use LoginService as authentication mechanism, uncomment the following
         section and comment the OAuth2 section below. -->

    <add key="AuthorizationMethod" value="LoginService" />
    <add key="DfaUserName" value="ENTER_YOUR_DFA_USERNAME_HERE"/>
    <add key="DfaPassword" value="ENTER_YOUR_DFA_PASSWORD_HERE"/>

    <!-- Uncomment this key if you want to reuse an authToken returned by
         LoginRemoteService multiple times. -->
    <!-- <add key="DfaAuthToken" value="ENTER_YOUR_DFA_AUTH_TOKEN_HERE"/> -->

    <!-- Settings specific to use OAuth2 as authentication mechanism. You could
         run Common\Util\OAuth2TokenGenerator.cs to generate this section of the
         config file.
    -->

    <!-- <add key="AuthorizationMethod" value="OAuth2" /> -->
    <!-- Provide the OAuth2 client ID and secret. You can create one from
         https://code.google.com/apis/console/. See
         https://code.google.com/p/google-api-dfp-dotnet/wiki/UsingOAuth
         for more details.
    -->
    <!--
    <add key="OAuth2ClientId" value="INSERT_OAUTH2_CLIENT_ID_HERE" />
    <add key="OAuth2ClientSecret" value="INSERT_OAUTH2_CLIENT_SECRET_HERE" />
    -->

    <!-- The following OAuth2 settings are optional. -->
    <!-- Provide a different OAuth2 scope if required. Multiple scopes should be
         separated by spaces. -->
    <!-- <add key="OAuth2Scope" value="INSERT_OAUTH2_SCOPE_HERE" /> -->

    <!-- Use the following keys if you want to use Web / Installed application
         OAuth flow.-->

    <!-- <add key="OAuth2Mode" value="APPLICATION" /> -->
    <!-- If you have only a single account, then you can run
         OAuth2TokenGenerator.cs to generate a RefreshToken for that account and
         set this key in your application's App.config / Web.config. If you are
         making calls to multiple accounts, then you need to implement OAuth2
         flow in your account and set this key at runtime. See OAuth folder
         under Examples folder for a web and a console application example.
    -->
    <!-- <add key="OAuth2RefreshToken" value="INSERT_OAUTH2_REFRESH_TOKEN_HERE" /> -->

    <!-- Optional: Specify an OAuth2 redirect url if you are building a
         web application and implementing OAuth2 web flow in your application.
    -->
    <!-- <add key="OAuth2RedirectUri" value="" /> -->


    <!-- Use the following keys if you want to use OAuth2 service account flow.
         You should comment out all the keys for Web / Installed application
         OAuth flow above. See
         https://developers.google.com/doubleclick-publishers/docs/service_accounts
         and https://code.google.com/p/google-api-dfp-dotnet/wiki/UsingOAuth
         for more details.
    -->
    <!--
    <add key="OAuth2Mode" value="SERVICE_ACCOUNT" />
    <add key="OAuth2ServiceAccountEmail"
        value="INSERT_OAUTH2_SERVICE_ACCOUNT_EMAIL_HERE" />
    <add key="OAuth2PrnEmail" value="INSERT_OAUTH2_USER_EMAIL_HERE" />
    <add key="OAuth2JwtCertificatePath"
        value="INSERT_OAUTH2_JWT_CERTIFICATE_PATH_HERE" />
    <add key="OAuth2JwtCertificatePassword"
        value="INSERT_OAUTH2_JWT_CERTIFICATE_PASSWORD_HERE" />
    -->
  </DfaApi>
  <system.web>
    <compilation debug="true">
      <assemblies>
        <add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </assemblies>
    </compilation>
    <authentication mode="Windows"/>
    <pages>
      <controls>
        <add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </controls>
    </pages>
    <httpHandlers>
      <remove verb="*" path="*.asmx"/>
      <add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      <add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      <add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false"/>
    </httpHandlers>
    <httpModules>
      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </httpModules>
    <webServices>
      <soapExtensionTypes>
        <add type="Google.Api.Ads.Common.Lib.SoapListenerExtension, Google.Ads.Common" priority="1" group="0"/>
      </soapExtensionTypes>
    </webServices>
  </system.web>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs" warningLevel="4" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <providerOption name="CompilerVersion" value="v3.5"/>
        <providerOption name="WarnAsError" value="false"/>
      </compiler>
    </compilers>
  </system.codedom>
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false"/>
    <modules>
      <add name="ScriptModule" preCondition="integratedMode" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </modules>
    <handlers>
      <remove name="WebServiceHandlerFactory-Integrated"/>
      <add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      <add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      <add name="ScriptResource" preCondition="integratedMode" verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </handlers>
  </system.webServer>
  <system.serviceModel>
    <services>
      <service behaviorConfiguration="Google.Api.Ads.Dfa.Examples.Wcf.WcfServiceBehavior" name="Google.Api.Ads.Dfa.Examples.Wcf.WcfService">
        <endpoint address="" binding="wsHttpBinding" contract="Google.Api.Ads.Dfa.Examples.Wcf.IWcfService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="Google.Api.Ads.Dfa.Examples.Wcf.WcfServiceBehavior">
          <serviceMetadata httpGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
  <system.net>
    <settings>
      <httpWebRequest maximumErrorResponseLength="-1"/>
    </settings>
  </system.net>
  <system.diagnostics>
    <sources>
      <source name="AdsClientLibs.DeprecationMessages"
        switchName="AdsClientLibs.DeprecationMessages"
        switchType="System.Diagnostics.SourceSwitch">
        <listeners>
          <add name="myListener"
            type="System.Diagnostics.EventLogTraceListener"
            initializeData="Application" />
        </listeners>
      </source>
      <source name="AdsClientLibs.SoapXmlLogs"
              switchName="AdsClientLibs.SoapXmlLogs"
              switchType="System.Diagnostics.SourceSwitch">
        <listeners>
          <!-- Modify the initializeData attribute below to control the
                path to the SOAP XML log file. -->
          <add name="soapXmlLogListener"
            type="System.Diagnostics.TextWriterTraceListener"
            initializeData="C:\Logs\Dfa\soap_xml.log" />
          <remove name="Default" />
        </listeners>
      </source>
      <source name="AdsClientLibs.RequestInfoLogs"
        switchName="AdsClientLibs.RequestInfoLogs"
        switchType="System.Diagnostics.SourceSwitch">
        <listeners>
          <!-- Modify the initializeData attribute below to control the
                path to the request info log file. -->
          <add name="requestInfoLogListener"
            type="System.Diagnostics.TextWriterTraceListener"
            initializeData="C:\Logs\Dfa\request_info.log" />
          <remove name="Default" />
        </listeners>
      </source>
    </sources>
    <switches>
      <!-- Use this trace switch to control the deprecation trace messages
          written by Ads* .NET libraries. The default is level is set to
          Warning. To disable all messages, set this value to Off. See
          http://msdn.microsoft.com/en-us/library/system.diagnostics.sourcelevels.aspx
          for all possible values this key can take. -->
      <add name="AdsClientLibs.DeprecationMessages" value="Warning"/>
      <!-- Use this trace switch to control the SOAP XML logs written by Ads*
          .NET libraries. The default level is set to Off. Logs are generated at
          both the Error and Information levels. -->
      <add name="AdsClientLibs.SoapXmlLogs" value="Off"/>
      <!-- Use this trace switch to control the Request Info logs written by
          Ads* .NET libraries. The default level is set to Off. Logs are
          generated at both the Error and Information levels. -->
      <add name="AdsClientLibs.RequestInfoLogs" value="Off"/>
    </switches>
    <trace autoflush="true" />
  </system.diagnostics>
</configuration>
