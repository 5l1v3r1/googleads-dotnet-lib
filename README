DFA API DotNet Client Library
=================================

DoubleClick for Advertisers (DFA) API lets developers to build applications
that interact directly with the DFA platform and perform a variety of
trafficking and administrative tasks. It is particularly useful for
automating recurring processes and for integrating DoubleClick for Advertisers
with third-party systems.

The DoubleClick for Advertisers (DFA) API DotNet Client Library makes it easier
to write .NET clients to programmatically access DFA accounts. All client
library classes and utilities are in the "Google.Api.Ads.Dfa" namespace or
sub-namespaces. The library is compatible with .NET SDK 2.0 and above. When
using the library, you needn't worry about downloading WSDLs and such, since
the library contains stub classes for all the supported services and takes
care of details like SOAP marshalling and unmarshalling, SOAP logging, etc.
The complete documentation for the DFA API is available from
http://code.google.com/apis/dfa/docs/overview.html.


What's in the client library?
-----------------------------

The client library provides full access to all the functionality of the DFA
API web services plus more. It includes:

  - Data classes: The client library provides all the necessary data classes.
    For example, it provides the Advertiser data class for encapsulating
    advertiser data. These classes are generated automatically from WSDLs using
    wsdl.exe and post-processed to provide features like
    - Not having to specify xxxSpecified = true for each nullable property.
    - Being able to treat SOAP faults as DFA exceptions rather than as
      generic SoapExceptions.
    - Reusing types across multiple services.

  - DfaUser class: The DfaUser class provides methods for setting credentials
    for accessing DFA accounts as well as for creating instances of the DFA
    Service classes.

  - Helpful utilities: The utilities located under
    Google.Api.Ads.Dfa.Utils help you get helpful data such as error codes,
    error messages, etc.

  - SOAP extensions: The client library provides you SOAP extensions that will
    log http messages, SOAP request and response xmls, etc.


How do I start?
---------------

The client library is provided as a Visual Studio project (source distribution)
as well as a precompiled .NET assembly (binary distribution). You may continue
reading the the appropriate section below, depending on the distribution you
downloaded from the site.


Binary distribution
-------------------

The binary distribution of DFA API DotNet client library consists of a
precompiled version of the library as a .NET assembly, code examples for using
the library, and library documentation. If you are interested in just using
the library and not in its internals, you should download this distribution.

The contents of this distribution are as follows:

  /
    /docs
      - Documentation xmls for Google.DFA.dll and DFA.Examples.exe.
      - Prebuilt help files for the client library in chm format.
    /lib
      - Precompiled library, Google.DFA.dll.
    /examples
      /csharp
        - Client library examples, provided as a Visual Studio project.
      /wcf
        - Shows how to setup a WCF service that uses DFA API + a consumer
	  for this service.
    README
    ChangeLog
    COPYING

The examples folder contains code examples for all the major functionality
supported by the library for all the supported versions of the API. To run
the examples,

- Open examples\csharp\Dfa.Examples.CSharp.csproj in Visual Studio 2005/2008.
- Open App.config and edit the following keys:
  - UserName: ENTER_YOUR_USERNAME_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.

- Save and close App.config.
- Open the Properties dialog for the Dfa.Examples.CSharp project (Right click
  the Dfa.Examples.CSharp project in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug Tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v1_15.GetAdTypes is the command line option to run v1_15\GetAdTypes.cs.
- Compile and run the Dfa.Examples.CSharp project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the Dfa.Examples Properties dialog and pick the desired class from the
"Startup object" dropdown.).

You can use the library in a new project as follows:

- Create a new Visual Studio project of your choice (For instance, a C# Windows
  application).
- Copy Google.Dfa.dll to your project directory. If you have a folder for
  keeping referenced libraries, then you may copy the assembly to this folder,
  otherwise it is a good practice to create one (e.g \lib) to keep the
  referenced assembly.
- Add a reference to the library and to System.Web.Services in your project.
- Copy examples\App.config to your project directory and add it to your project.
  Edit the required keys in App.config. If your application has its own
  App.config, then you can copy configuration/DfaApi,
  configuration/system.web, configuration/configSections/section(
  name="DfaApi"), and configuration/system.net nodes into your App.config.
- Make a call to the library as follows:

  DfaUser user = new DfaUser();
  AdvertiserRemoteService service = (AdvertiserRemoteService) user.GetService(
      DfaService.v1_15.AdvertiserRemoteService);
  // make more calls to service class.

All the supported services in the client library are available as
DfaService.vx_xx.ServiceName, where vx_xx is the API version (v1_15) and
ServiceName is the name of the service you want to create.

Finally, if you wish to use this assembly in another .NET compatible language
like VB.NET, then you may do so without any issues. The library is CLSCompliant.


Source distribution
-------------------

The source distribution of the DFA API DotNet client library consists of
individual Visual Studio projects for the client library, code examples and
test cases, documentation for using the library, and support libraries and tools
for compiling and running the library. If you are interested in the library
internals you should download this distribution.

The contents of this distribution are as follows:

  /
    /data
       Data CSVs required by the library.
    /docs
      - Prebuilt help files for the client library in .CHM format.
      - A .sbproj (Sandcastle project) for building the documentation.
    /examples
      /csharp
        - Client library examples, provided as a Visual Studio project.
      /wcf
        - Shows how to setup a WCF service that uses DFA API + a consumer
	  for this service.
    /lib
      - External client libraries referenced by various projects in the source
        distribution.
    /src
      - Client library source, provided as a Visual Studio project.
    /tests
      - NAnt test cases for the library, provided as a Visual Studio project
    README
    ChangeLog
    COPYING
    Dfa.2005.sln
    Dfa.2008.sln

To compile and run the project:

- Open Dfa.2005.sln or Dfa.2008.sln depending on the version of
  Visual Studio you are using.
- Open App.config under the csharp\Dfa.Examples.CSharp project and edit the following
  keys:
  - UserName: ENTER_YOUR_USERNAME_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.

- Save and close App.config.
- Open the Properties dialog for the Dfa.Examples.CSharp project (Right click
  the Dfa.Examples.CSharp project in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v111.GetAdTypes is the command line option to run v111.GetAdTypes.
- Set the Dfa.Examples project as the Startup project.
- Compile and run the Dfa.Examples project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the Dfa.Examples.CSharp Properties dialog and pick the desired class from the
"Startup object" dropdown.).

To run the test cases, you need to download and install the latest version of
NUnit from http://www.nunit.org/. Once you have installed NUnit, you can
compile and run the test cases as follows:

- Right click the Dfa.Tests project and choose References from the context
  menu.
  From the references dialog, add a reference to the nunit.framework assembly.
- Right click the Dfa.Tests project and choose Properties. Navigate to the
  Debug tab and choose "Start external program". Browse to the path for
  nunit.exe and pick it as the Startup application.
- Open App.config under the Dfa.Tests project and edit the following keys:
  - UserName: ENTER_YOUR_USERNAME_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.

- It is recommended that you run the test cases against the DFA test
  environment.a sandbox account. See
  http://code.google.com/apis/dfa/docs/getting_started.html#chooseenvironment
  for details on using the Dfa test environment.
- Set Dfa.Tests project as the startup project and run the project.

If you wish to add the DFA client library as part of your workspace, then
you need to copy \src folder and \data folder to your workspace folder and then
add DFA.csproj to your .sln.


Configuring the client library
------------------------------

The client library may be configured using the settings exposed by App.config.
For a detailed list of all the available configuration options, you can refer
to https://code.google.com/p/google-api-dfa-dotnet/wiki/UnderstandingAppConfig


Miscellaneous
-------------

Requires:
    - .NET Framework 2.0 (or above)
                        -- http://msdn2.microsoft.com/en-us/netframework/default.aspx
    - Visual Studio     -- http://msdn2.microsoft.com/en-us/vstudio/default.aspx

Bug tracker:
    - https://code.google.com/p/google-api-dfa-dotnet/issues/list

Support forum:
    - http://groups.google.com/group/google-doubleclick-for-advertisers-api/

Author:
    api.anash@gmail.com (Anash P. Oommen)
