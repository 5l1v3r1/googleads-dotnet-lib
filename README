AdWords API DotNet Client Library
=================================

Google's AdWords API service lets developers design computer programs that
interact directly with the AdWords platform. With these applications,
advertisers and third-parties can more efficiently - and creatively - manage
their large or complex AdWords accounts and campaigns.

The AdWords API DotNet Client Library makes it easier to write .NET clients to
programmatically access AdWords accounts. All client library classes and
utilities are in the "Google.Api.Ads.AdWords" namespace or sub-namespaces.
The library is compatible with .NET SDK 2.0 and above. When using the library,
you needn't worry about downloading WSDLs and such, since the library contains
stub classes for all the supported services and takes care of details like SOAP
marshalling and unmarshalling, SOAP logging, etc. The complete documentation for
the AdWords API is available from
http://www.google.com/apis/adwords/developer/index.html.


What's in the client library?
-----------------------------

The client library provides full access to all the functionality of the AdWords
API web services plus more. It includes:

  - Data classes: The client library provides all the necessary data classes.
    For example, it provides the Campaign data class for encapsulating campaign
    data. These classes are generated automatically from WSDLs using wsdl.exe
    and post-processed to provide features like
    - Not having to specify xxxSpecified = true for each nullable property.
    - Being able to treat SOAP faults as AdWords exceptions rather than as
      generic SoapExceptions.
    - Reusing types across multiple services.

  - AdWordsUser class: The AdWordsUser class provides methods for setting
    credentials for accessing AdWords accounts as well as for creating instances
    of the AdWords Service classes.

  - Helpful utilities: The utilities located under
    Google.Api.Ads.AdWords.Utils help you download reports, retrieve detailed
    information about api units usage, get helpful data such as city codes and
    method unit cost, backup or restore accounts, etc.

  - SOAP extensions: The client library provides you SOAP extensions that will
    log http messages, SOAP request and response xmls, keep track of API units
    used, etc.


How do I start?
---------------

The client library is provided as a Visual Studio project (source distribution)
as well as a precompiled .NET assembly (binary distribution). You may continue
reading the the appropriate section below, depending on the distribution you
downloaded from the site.


Binary distribution
-------------------

The binary distribution of AdWords API DotNet client library consists of a
precompiled version of the library as a .NET assembly, code examples for using
the library, and library documentation. If you are interested in just using
the library and not in its internals, you should download this distribution.

The contents of this distribution are as follows:

  \
    \docs
      - Documentation xmls for Google.AdWords.dll and AdWords.Examples.exe.
      - Prebuilt help files for the client library in chm format.
    \lib
      - Precompiled library, Google.AdWords.dll.
    \examples
      - Client library examples, provided as a Visual Studio project.
    README
    ChangeLog
    COPYING

The examples folder contains code examples for all the major functionality
supported by the library for all the supported versions of the API. To run
the examples,

- Open examples\AdWords.Examples.csproj in Visual Studio 2005/2008.
- Open App.config and edit the following keys:
  - UserAgent: ENTER_YOUR_COMPANY_OR_APPLICATION_NAME_HERE.
  - Email: ENTER_YOUR_EMAIL_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.
  - ClientEmail: ENTER_YOUR_CLIENT_EMAIL_HERE.
  - DeveloperToken: ENTER_YOUR_DEVELOPER_TOKEN_HERE.

- Save and close App.config.
- Open the Properties dialog for the AdWords.Examples project (Right click
  the AdWords.Examples project in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug Tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v201003.AddCampaign is the command line option to run v201003\AddCampaign.cs.
- Compile and run the AdWords.Examples project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the AdWords.Examples Properties dialog and pick the desired class from the
"Startup object" dropdown.).

You can use the library in a new project as follows:

- Create a new Visual Studio project of your choice (For instance, a C# Windows
  application).
- Copy Google.AdWords.dll to your project directory. If you have a folder for
  keeping referenced libraries, then you may copy the assembly to this folder,
  otherwise it is a good practice to create one (e.g \lib) to keep the
  referenced assembly.
- Add a reference to the library and to System.Web.Services in your project.
- Copy examples\App.config to your project directory and add it to your project.
  Edit the required keys in App.config. If your application has its own
  App.config, then you can copy configuration/AdWordsApi,
  configuration/system.web, configuration/configSections/section(
  name="AdWordsApi"), and configuration/system.net nodes into your App.config.
- Make a call to the library as follows:

  AdWordsUser user = new AdWordsUser();
  CampaignService service = (CampaignService) user.GetService(
      AdWordsService.v201003.CampaignService);
  // make more calls to service class.

All the supported services in the client library are available as
AdWordsService.vxxx.ServiceName, where vxxx is the API version (v13, v200909,
v201003) and ServiceName is the name of the service you want to create.

Finally, if you wish to use this assembly in another .NET compatible language
like VB.NET, then you may do so without any issues. The library is almost
CLSCompliant (with the exception of Predicate.Operator.EQUALS, which has a name
collision with Enum.Equals).


Source distribution
-------------------

The source distribution of the AdWords API DotNet client library consists of
individual Visual Studio projects for the client library, code examples and
test cases, documentation for using the library, and support libraries and tools
for compiling and running the library. If you are interested in the library
internals you should download this distribution.

The contents of this distribution are as follows:

  /
    /data
       Data CSVs required by the library.
    /docs
      - Prebuilt help files for the client library in .CHM format.
      - A .sbproj (Sandcastle project) for building the documentation.
    /examples
      - Client library examples, provided as a Visual Studio project.
    /lib
      - External client libraries referenced by various projects in the source
        distribution.
    /src
      - Client library source, provided as a Visual Studio project.
    /tests
      - NAnt test cases for the library, provided as a Visual Studio project
    README
    ChangeLog
    COPYING
    AdWords.2005.sln
    AdWords.2008.sln

To compile and run the project:

- Open AdWords.2005.sln or AdWords.2008.sln depending on the version of
  Visual Studio you are using.
- Open App.config under the AdWords.Examples project and edit the following
  keys:
  - UserAgent: ENTER_YOUR_COMPANY_OR_APPLICATION_NAME_HERE.
  - Email: ENTER_YOUR_EMAIL_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.
  - ClientEmail: ENTER_YOUR_CLIENT_EMAIL_HERE.
  - DeveloperToken: ENTER_YOUR_DEVELOPER_TOKEN_HERE.

- Save and close App.config.
- Open the Properties dialog for the AdWords.Examples project (Right click
  the AdWords.Examples project in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v201003.AddCampaign is the command line option to run v201003\AddCampaign.cs.
- Set the AdWords.Examples project as the Startup project.
- Compile and run the AdWords.Examples project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the AdWords.Examples Properties dialog and pick the desired class from the
"Startup object" dropdown.).

To run the test cases, you need to download and install the latest version of
NUnit from http://www.nunit.org/. Once you have installed NUnit, you can
compile and run the test cases as follows:

- Right click the AdWords.Tests project and choose References from the context
  menu.
  From the references dialog, add a reference to the nunit.framework assembly.
- Right click the AdWords.Tests project and choose Properties. Navigate to the
  Debug tab and choose "Start external program". Browse to the path for
  nunit.exe and pick it as the Startup application.
- Open App.config under the AdWords.Tests project and edit the following keys:
  - UserAgent: ENTER_YOUR_COMPANY_OR_APPLICATION_NAME_HERE.
  - Email: ENTER_YOUR_EMAIL_HERE.
  - Password: ENTER_YOUR_PASSWORD_HERE.
  - ClientEmail: ENTER_YOUR_CLIENT_EMAIL_HERE.
  - LegacyAdWordsApi.Server: https://sandbox.google.com
  - AdWordsApi.Server: https://adwords-sandbox.google.com
  - DeveloperToken: ENTER_YOUR_DEVELOPER_TOKEN_HERE.

- It is recommended that you run the test cases against a sandbox account. See
  http://code.google.com/apis/adwords/docs/developer/adwords_api_sandbox.html
  for details on using the AdWords API Sandbox.
- Set AdWords.Tests project as the startup project and run the project.

If you wish to add the AdWords client library as part of your workspace, then
you need to copy \src folder and \data folder to your workspace folder and then
add AdWords.csproj to your .sln.


Configuring the client library
------------------------------

The client library may be configured using the settings exposed by App.config.
For a detailed list of all the available configuration options, you can refer
to http://code.google.com/p/google-api-adwords-dotnet/wiki/UnderstandingAppConfig


Miscellaneous
-------------

Requires:
    - .NET Framework 2.0 (or above)
                        -- http://msdn2.microsoft.com/en-us/netframework/default.aspx
    - Visual Studio     -- http://msdn2.microsoft.com/en-us/vstudio/default.aspx
    - Google Account    -- https://www.google.com/accounts/NewAccount

Bug tracker:
    - http://code.google.com/p/google-api-adwords-dotnet/issues/list

Support forum:
    - https://groups.google.com/group/adwords-api?pli=1

Author:
    api.anash@gmail.com (Anash P. Oommen)
